var mysql = require("node-mysql"),
    crc32 = require("crc32"),
    executeQuery = require("executeQuery").createQuery;

var SELECTconnections = [],
    connections = [],
    INSERTconnection = 0,
    connectionCount = 20,
    queryCount = 0;

function connectionSort (a, b) {
    return a.used - b.used;
}

function getConnection (method) {
    if (method == 'SELECT') {
        SELECTconnections.sort(connectionSort);
        return SELECTconnections[0];
    } else {
        return INSERTconnection;
    }
}

exports.init = function (settings) {
    for (var i = 0; i < connectionCount; ++i) {
        SELECTconnections[i] = {
            id: i,
            driver: mysql.createConnection(settings),
            used: 0
        };
        /*SELECTconnections[i].driver.query("START TRANSACTION");
         SELECTconnections[i].driver.query("SET AUTOCOMMIT=0");
         SELECTconnections[i].TRANSACTION = true;/**/
    }
    INSERTconnection = {
        id: 'update',
        driver: mysql.createConnection(settings),
        used: 0
    };
    INSERTconnection.driver.query("START TRANSACTION");
    INSERTconnection.driver.query("SET AUTOCOMMIT=0");
    INSERTconnection.TRANSACTION = true;

    connections.push.apply(connections, SELECTconnections);
    connections.push(INSERTconnection);
}

function query (sql, values, callback) {
    var method = sql.indexOf('SELECT') == 0 ? 'SELECT' : 'UPDATE';
    var connection = getConnection(method);
    connection.used++;

    queryCount++;
    connection.driver.query(sql, values, function (err, results) {
        connection.used--;
        if (err) {
            console.error(err);
            if (err.fatal) {
                throw new Error(err);
            }
        }
        if (callback) {
            callback(err, results);
        }
    });
}


var shutDownStartTime = 0;

var closeDatabase = function () {
    var useCount = 0;
    for (var i = 0; i < connectionCount + 1; ++i) {
        useCount += connections[i].used;
    }
    if (useCount) {
        console.log('still ', useCount, ' in queue. ', queryCount, " passed");
        setTimeout(closeDatabase, 1000);
    } else {
        for (var i = 0; i < connectionCount + 1; ++i) {
            connections[i].driver.end();
        }
        console.log("ended in ", +(new Date()) - shutDownStartTime);
    }
}

exports.close = function () {
    for (var i = 0; i < connectionCount + 1; ++i) {
        if (connections[i].TRANSACTION) {
            connections[i].driver.query('COMMIT;');
        }
    }
    shutDownStartTime = +(new Date());
    closeDatabase();
}

exports.saveWay = function (id, coordinates, tags, bounds, callback) {
    query("SELECT ID FROM ways WHERE Id=?", [id], function (err, results) {
        //query("DELETE FROM ways WHERE Id=?", [id], function () {
        if (results.length == 0) {
            query("INSERT INTO ways SET ?", {
                id: id,
                coordinates: coordinates,
                tags: JSON.stringify(tags) || '',
                minx: bounds[0][0],
                miny: bounds[0][1],
                maxx: bounds[1][0],
                maxy: bounds[1][1]
            }, callback);
        } else {
            callback();
        }
        //});
    });
}

exports.saveRegion = function (id, tags, createRegionPaths, callback) {
    var callbackquery = executeQuery(callback);


    callbackquery.push();
    query("SELECT Id FROM regions WHERE Id=?", [id], function (err, results) {
        if (results.length == 0) {
            callbackquery.push();
            createRegionPaths();
            query("DELETE FROM regions WHERE Id=?", [id], function () {
                callbackquery.push();
                query("INSERT INTO regions SET ?", {
                    id: id,
                    level: tags.admin_level
                }, function () {
                    callbackquery.pop();
                });
                callbackquery.pop();
            });

            callbackquery.push();
            query("DELETE FROM regions_i18n WHERE regionId=?", [id], function () {
                for (var key in tags) {
                    if (key.indexOf('name') == 0) {
                        var lng = key.substr(5) || '@';
                        callbackquery.push();
                        query("INSERT INTO regions_i18n SET ?", {
                            regionId: id,
                            lang: lng,
                            value: tags[key]
                        }, function () {
                            callbackquery.pop()
                        });
                    }
                }
                callbackquery.pop();
            });

            callbackquery.push();
            query("DELETE FROM regions_tags WHERE regionId=?", [id], function () {

                for (var key in tags) {
                    callbackquery.push();
                    query("INSERT INTO regions_tags SET ?", {
                        regionId: id,
                        tag: key,
                        value: tags[key]
                    }, function () {
                        callbackquery.pop()
                    });
                }
                callbackquery.pop();
            });
        }
        callbackquery.pop();
    });
}


exports.linkPath = function (regionId, ways, callback) {
    var callbackquery = executeQuery(callback);
    callbackquery.push();
    query("DELETE FROM regionPaths WHERE regionId=?", [regionId], function () {
        var pathId = 0,
            order = 0;
        //save
        for (var j = 0, l = ways.length; j < l; ++j) {
            if (ways[j] !== 'break') {
                var dirrection = ways[j] < 0 ? -1 : 1,
                    wayId = Math.abs(ways[j]);
                callbackquery.push();
                query("INSERT INTO regionPaths SET ?", {
                    regionId: regionId,
                    pathId: pathId,
                    order: order,
                    wayId: wayId,
                    dirrection: dirrection
                }, function () {
                    callbackquery.pop()
                });
                order++;
            } else {
                pathId++;
                order = 0;
            }
        }
        callbackquery.pop();
    });
}

exports.assignParents = function (callback) {
    query("DELETE FROM regionParents", [], function () {
        query("INSERT INTO regionParents SELECT a.id, c.id,c.level-a.level\
        FROM regions AS a\
        INNER JOIN regionPaths AS b ON a.id = b.regionId\
        INNER JOIN regionPaths AS b2 ON b2.wayId = b.wayId\
        INNER JOIN regions AS c ON c.id = b2.regionId\
        WHERE a.level > c.level\
        GROUP BY a.id,c.id", [], function () {
            query("UPDATE regions as r SET parent=(SELECT parent FROM regionParents WHERE region=r.id ORDER BY deltaLevel ASC LIMIT 1)");
        })
    });
}

var cacheCount = 0;

exports.cache = function (name, request, callback) {
    var crc = parseInt('0x' + crc32(name));
    var fetchData = function (newdata) {
        query("INSERT INTO cache SET ?", {
            url: name,
            crc: crc,
            content: newdata,
            timestamp: +(new Date())
        }, function () {
            callback(newdata);
        });
    }

    query('SELECT content FROM cache WHERE crc=? and url = ? LIMIT 1', [crc, name], function (err, results) {
            if (results.length == 0 || results[0].content.length < 5) {
                request(function (newdata) {
                        if (results.length == 0) {
                            fetchData(newdata);
                        } else {
                            query("DELETE FROM cache WHERE url=?", [name], function () {
                                fetchData(newdata);
                            });
                        }
                    }
                );
            } else {
                callback(results[0].content);
            }
        }
    )
    ;
}