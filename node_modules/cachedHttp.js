var http = require('http');
var connection = require('database');

function load (host, path, callback) {

    //в обратном порядке, для ускорения поиска ключа
    var cacheName = path + host;
    connection.cache(cacheName, function (response) {
        var startTime = +(new Date());
        makeHttpRequest(host, path, function (data) {
            console.log('loaded via http', path, " in ", data.length, 'bytes, ', +(new Date()) - startTime, 'ms');
            response(data);
        });
    }, function (data) {
        callback(data);
    });
}

function _makeHttpRequest (host, path, callback) {
    var options = {
        host: host,
        port: 80,
        path: path
    };

    var bufferArray = [], bufferArrayCommonLength = 0;

    http.get(options,function (res) {

        res.on('data', function (data) {
            // нельзя приводить к строке куски буфера, нужно сначала скелить буферы, потом приводить
            // иначе могут побиться utf символы, которые разобьются на два куска
            bufferArray.push(data);
            bufferArrayCommonLength += data.length;
        })

        res.on('end', function () {

            var currentIndex = 0;
            var resBuffer = new Buffer(bufferArrayCommonLength);
            bufferArray.forEach(function (buffer) {
                buffer.copy(resBuffer, currentIndex, 0, buffer.length);
                currentIndex += buffer.length;
            });

            callback(resBuffer.toString());
        })
    }).on('error', function (e) {
            console.log('load http', host, path)
            console.log("http load error: " + e.message);
        });
}

// Ограничивает количество параллельно исполняемых действий
var executer = new (require('executer.js'))(16);

var makeHttpRequest = function (host, path, callback) {
    executer.add(function (completeCallback) {
        _makeHttpRequest(host, path, function () {
            completeCallback();
            if (callback) {
                return callback.apply(null, arguments);
            }
        })
    });
}

exports.load = load;
